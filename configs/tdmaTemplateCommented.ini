[tdma-options]

# Copyright 2013-2014 Massachusetts Institute of Technology

# ==========================================================================
# RUN PARAMETERS
# ==========================================================================
# Name: run_duration
# Description: The duration during which the node attempts communications.  This
#              run time duration does not include the time needed to initialize 
#              and calibrate the gps error. The node will terminate when this duration 
#              has expired.
# Development Status Code: VALIDATED
# Units: Seconds
# Range of Units: 0 - inf
# Dependencies: None
# Other limitations: None
# Default: inf  
run_duration = inf


# Name: start_time
# Description: The start time, specified as the number of seconds since 1970, is
#              the time at which a node begins executing.  This start time demarks the
#              moment at which initialiazation (not communication) begins. 
#              A value of 0 or values in the past will start the node immediately.
# Development Status Code: VALIDATED
# Units: Seconds
# Validated Value Set:
# Possible Value Set:
# Default Value: 0
start_time = 0


#===========================================================================
#[RADIO FRONTEND] MID-LEVEL PARAMETERS
#===========================================================================
# Name: rf_tx_freq
# Description: Radio Frontend (UHD) transmitter center frequency
# Development Status Code: VALIDATED
# Units: Hz
# Range of Units: limited by the radio frontend''s tuning range
# Dependencies: Must match rf_rx_freq of intended receiver node
# Other limitations:
# Default: 910e6
rf_tx_freq = 910e6


# Name: rf_rx_freq
# Description: Radio Frontend (UHD) transmitter center frequency
# Development Status Code: VALIDATED
# Units: Hz
# Range of Units: limited by the radio frontend''s tuning range
# Dependencies: Must match rf_tx_freq of intended transmitter node
# Other limitations:
# Default: 910e6
rf_rx_freq = 910e6


# Name: rf_tx_gain
# Description: Radio Frontend (UHD) transmitter gain
# Development Status Code: VALIDATED
# Units: dB
# Range of Units: 0-31.5 in steps of size 0.5 
# Dependencies: None
# Other limitations: None
# Default: 0
rf_tx_gain = 0

   
# Name: rf_rx_gain
# Description: Radio Frontend (UHD) receiver gain
# Development Status Code: VALIDATED
# Units: dB
# Range of Units: 0-31.5 in steps of size 0.5 
# Dependencies: None
# Other limitations: None
# Default: 0
rf_rx_gain = 31.5


#===========================================================================
#[RADIO FRONTEND] LOW-LEVEL PARAMETERS
#===========================================================================
# Name: args
# Description: Used to define which USRP ip address to communicate with
# Development Status Code: VALIDATED
# Units: N/A
# Range of Units: valid IP addresses
# Dependencies: Must match the IP address configured on the USRP. 
# Other limitations: Point to point connection to the USRP must be on the same
#                     subnet as the USRP. DO NOT INCLUDE ANY SPACES
# Default: addr=192.168.10.2  (no spaces)
usrp_args = addr=192.168.10.2


# Name: spec
# Description: UHD subdevice specification. Not currently used.
# Development Status Code: IMPLEMENTED
# Units: N/A
# Range of Units: N/A
# Dependencies: 
# Other limitations: 
# Default: 
usrp_spec = 


# Name: antenna
# Description: UHD antenna specification. Not currently used.
# Development Status Code: IMPLEMENTED
# Units: N/A
# Range of Units: N/A
# Dependencies: 
# Other limitations:
# Default:
usrp_antenna = 


# ==========================================================================
# [GPS ERROR CALIBRATION]
# ==========================================================================
# NOTE: There is an unknown bug in the UHD firmware/driver that causes GPS 
# time reporting to be have an offset of exactly -1, 0, or 1 seconds from truth.
# This has been verified only for Jackson Lab GPS module in a Ettus USRP N210
# (hardware rev. 4, firmware version 12.3) in combination with and UHD version
# UHD_003.005.000-26-gb65a3924. This bug requires a workaround calibration stage
# that is executed between a tdma_base and each tdma_mobile when the nodes 
# initialize. The parameters below apply to this calibration stage.
#
# Name: gpsbug_cal_channel
# Description: The digital channel used for calibrating the gps timing offset error.
# Units: Channel number
# Validated Value Set: [0, digital_freq_hop_num_channels-1]
# Possible Value Set:  [0, digital_freq_hop_num_channels-1]
# Default Value: 0
# Dependencies: None
# Other limitations: Use gpsbug_cal_channel = 0 when digital_freq_hop_num_channels = 0
gpsbug_cal_channel = 0


# Name: gpsbug_cal_duration
# Description: The duration used for calibrating the gps timing offset error.
# Units: seconds
# Validated Value Set: 10
# Possible Value Set: (<frame_len> from frame_file):inf
# Default Value: 10
gpsbug_cal_duration = 10


#===========================================================================
#[PHY LAYER: DIGITAL FREQUENCY HOPPING/CHANNELIZER] MID-LEVEL PARAMETERS
#===========================================================================
# Name: digital_freq_hop_num_channels
# Description: Number of digital channels that the PHY baseband is divided into.
#              The individual baseband channel center frequencies indices, fc_i,
#              are computed in the digital domain prior to D/A (Tx side)
#              and post A/D (Rx Side) according to the following equation:
#                       fc_i = i/N   (cycles per sample)
#              where i is the channel number specified in the <bb_freq> field
#              in the XML frame_file and N is the digital_freq_hop_num_channels.
#              After analog conversion, these channel indices will be at
#                       Fc_i = Fs*(i/N) + Fc     (Hz)     when i < N/2
#                       Fc_i = Fs*(1 - i/N) + Fc (Hz)     when i >= N/2
#              where Fc is the center frequency of the USRP (given by fields
#              rf_rx_freq and rf_tx_freq) and Fs is the sampling frequency of a
#              single digital channel which is itself  given by
#                       modulation_samples_per_symbol*modulation_bitrate/log2(M)
#              where M is the constellation size of the specified modulation).
#              If digital_freq_hop_num_channels = N and Fs is the modulation sample rate
%              for a single channel (given in the description above) then the baseband
#              sample rate used by the USRP will be Fs_ursp = N*Fs
# Units: Integer channel index
# Validated Value Set: non-negative intigers [1:10]
# Possible Value Set: [0, inf]
# Default Value: 1
# Dependencies: determines the range of feasible values for  <bb_freq> in the frame_file.
#               modulation_bitrate, modulation_samples_per_symbol
# Other limitations: Please be cognizant that channel index N/2 will stradle
#                    the Fs/2 boundary when N is even
#                    The N/2 channel will threfore be split in the RF spectrum
#                    and one should avoided using it for communcations.
digital_freq_hop_num_channels = 1


# Name: Guard Channels
# Description: A comma separated list of the digital channel indices that will  
#              not be allocated (used) by the TDMA-BERF protocol.
# Units: Channel Numbers
# Validated Value Set: [empty,0, digital_freq_hop_num_channels-1]
# Possible Value Set: [empty,0, digital_freq_hop_num_channels-1]
# Default Value: (empty)
# Dependencies:
digital_freq_hop_guard_channels = 


#===========================================================================
#[PHY LAYER: DIGITAL FREQUENCY HOPPING/CHANNELIZER] LOW-LEVEL PARAMETERS
#===========================================================================
# Name: Transition bandwidth of the receive side downsample filter
# Description: This field sets the transition bandwidth in cycles per sample
#              from pass band to stop band of the lowpass decimation filter
#              used to convert the received multiple FH channels to a
#              single designated channel for demodulation.
# Units: cycles per sample
# Validated Value Set:  0.01
# Possible Value Set:   Close to zero. Should be much smaller than the passband
#                       of the filter which will be 0.5/N where N is the number of
#                       digital channels.
# Default Value: 0.01
# Dependencies: A smaller transition band will result in a longer (more taps)
#               filter being implemented. This will lessen distortion around
#               the passband cut-off frequency, but will increase group delay
#               of the filter and could (in theory) mess with TDMA timing
#               (although in practice this has never been observed).
# Other limitations: None
rx_channelizer_transition_bandwidth = 0.01


# Name: Attenution of the stop band of the receive side downsample filter
# Description: This field sets (in dB) the attenuation of the stop band
#              for the lowpass decimation filter used to convert the
#              received multiple FH channels to a single designated channel
#              for demodulation.
# Units: magnitude attenuation dB
# Validated Value Set: [0, inf]
# Possible Value Set:  [0, inf]
# Default Value: 30
# Dependencies: More attenuation results in a longer filter being implemented
#               which increases group delay of the filter (which in theory
#               could mess with TDMA timing although this has not yet been
#               observed). More attenuation increase out of band rejection.
#
# Other limitations: None
rx_channelizer_attenuation_db = 30


# Name: Transition bandwidth of the transmit side upsample filter
# Description: This field sets the transition bandwidth in cycles per sample
#              from pass band to stop band of the lowpass interpolation filter
#              used to convert the single channel to a designated baseband
#              channel for frequency hopping.
# Units: cycles per sample
# Validated Value Set:  0.01
# Possible Value Set:   Close to zero. Should be much smaller than the passband
#                       of the filter which will be 0.5/N where N is the number of
#                       digital channels.
# Default Value: 0.01
# Dependencies: A smaller transition band will result in a longer (more taps)
#               filter being implemented. This will lessen distortion around
#               the passband cut-off frequency, but will increase group delay
#               of the filter and could (in theory) mess with TDMA timing
#               (although in practice this has never been observed).
# Other limitations: None
tx_channelizer_transition_bandwidth = 0.01


# Name: Attuenation of the stop band of the transmit side upsample filter
# Description: This field sets (in dB) the attenuation of the stop band
#              for the lowpass interpolation filter used to convert the
#              single channel to a designated baseband channel for
#              frequency hopping.
# Units: magnitude attenuation dB
# Validated Value Set: [0, inf]
# Possible Value Set:  [0, inf]
# Default Value: 30
# Dependencies: More attenuation results in a longer filter being implemented
#               which increases group delay of the filter (which in theory
#               could mess with TDMA timing although this has not yet been
#               observed). More attenuation increase aliasing image rejection.
#
# Other limitations: None
tx_channelizer_attenuation_db = 30


#===========================================================================
#[PHY LAYER: MODULATION] MID-LEVEL PARAMETERS
#===========================================================================
# Name: modulation
# Description: Type of modulation to be used
# Units: N/A
# Validated Value Set: gmsk
# Possible Value Set:  gmsk
# Default Value: gmsk
# Dependencies: None
# Other limitations: Only GMSK has been implemented for TDMA nodes
modulation = gmsk


# Name: modulation_bitrate
# Description: Bit rate
# Units: bits/second
# Validated Value Set: [100e3 to some 500e3]
# Possible Value Set:  [0 to inf]
# Default Value: 1e5
# Dependencies: digital_freq_hop_num_channels, modulation_samples_per_symbol
# Other limitations: When setting modulation_bitrate please abide by the rules below:
#
#                    1) The critical sampling frequency of the channel is determined by
#                    the following:
#                       Fs = modulation_bitrate*modulation_samples_per_symbol/log2(M)
#                    where M is the modulation order.
#
#                    2) The sampling rate of the USRP will be 
#                    Fs_usrp=N*Fs (digital_freq_hop_num_channels = N). 
#                    To best use the USRP N210 CIC filters, onse should make certain that 
#                    Fs_usrp evenly divides 100e6.
modulation_bitrate = 100000


# Name: modulation_samples_per_symbol
# Description: The number of samples per symbol
# Units: samples/symbol
# Validated Value Range: 2,4
# Possible Value Range:  integers >= 2
# Default Value Range: 2
# Dependencies: digital_freq_hop_num_channels, modulation_bitrate
# Other limitations: maximum bit rate probably constrained by USRP max sample rate
#                    The critical sampling frequency of the channel is determined by
#                    the following when using narrowband:
#                       Fs = modulation_bitrate*modulation_samples_per_symbol/log2(M)
#                    where M is the modulation order. The sampling frequency of the USRP
#                    will be a multiple of this based on the number of digital channels
#                    specified.               
modulation_samples_per_symbol = 2


# Name: digital_scale_factor
# Description: The scaling applied to baseband samples in the transmitter
# Units: N/A
# Validated Value Range: 0.25,0.5
# Possible Value Range:  rational numbers > 0
# Default Value Range: 0.5
# Dependencies:
# Other limitations: Should be set so that the baseband samples magnitudes are < 1
digital_scale_factor = 0.5



#===========================================================================
#[PHY LAYER: MODULATION] LOW-LEVEL PARAMETERS
#===========================================================================
# bandwidth-time product for GMSK modulation
# Description: set bandwidth time product for GMSK modulation
# Units: unitless
# Validated Value Range 0.35
# Possible Value Range: [0.3 to 0.5]
# Default Value Range 0.35
# Dependencies: modulation must be GMSK
# Other limitations:
bt = 0.35


# MU M&M clock recovery mu  (GMSK)
# Default Value: 0.5
mu = 0.5


#OMEGA_RELATIVE_LIMIT M&M clock recovery omega relative limit (GMSK)
# Default Value: 0.005
omega_relative_limit = 0.005


#FREQ_ERROR M&M clock recovery frequency error (GMSK)
# Default Value: 0.0
freq_error = 0.0


# chbw-factor=CHBW_FACTOR
# Description: Channel bandwidth = chbw_factor x signal bandwidth
# Default Value: 1.0
chbw_factor = 1.0


# Threshold
# Description: Number of incorrect bits allowed in access code to declare a
#              packet detection.
# Development Status Code: IMPLEMENTED
# Units: bits
# Range of Units: [0:tx_access_code-1]
# Dependencies: Must be less than tx_access_code
# Other limitations: The more bits allowed the higher the probability of
#                    false alarm but the lower the probability of missed
#                    detection
# Default: 4
threshold = 4


#GAIN_MU   M&M clock recovery gain mu  (GMSK)
#default=none   # if setting a none, comment out the parameter
gain_mu = 0.175


#===========================================================================
#[LINK LAYER: TDMA PROTOCOL] MID-LEVEL PARAMETERS
#===========================================================================
# Name: node_role
# Description: The role the node plays at the LINK Layer in the network
# Units: N/A
# Validated Value Set: { tdma_mobile, tdma_base }
# Possible Value Set: { tdma_mobile, tdma_base }
# Default Value: tdma_mobile
# Other limitations: Only one node can play the role of tdma_base
node_role = tdma_mobile


# Name: frame_file
# Description: The name of the XML file used by the tdma_base node to define the
#              slot/channel assignment structure for the TDMA frame.
# Units: N/A
# Validated Value Set: *.xml
# Possible Value Set: *.xml
# Default Value: frame.xml    
frame_file = frame.xml


# Name: beacon_sync_timeout
# Description: Duration that a tdma_mobile node retains beacons in the  
#              beacon list it uses for TDMA frame sync
# Units: Seconds
# Validated Value Set: 10,20
# Possible Value Set: (<frame_len> from frame_file):infinity
# Default Value: 10 
beacon_sync_timeout = 10


# Name: min_sync_beacons
# Description: Minimum number of received beacons that a tdma_mobile nodes retain to declare sync
# Units: packets
# Validated Value Set: 2:4
# Possible Value Set: 1:infinity
# Default Value: 1 
min_sync_beacons = 1


# Name: max_sync_beacons
# Description:  Minimum number of received beacons that a tdma_mobile nodes retain to declare sync
# Units: packets
# Validated Value Set: 5,10
# Possible Value Set: min_sync_beacons:infinity
# Default Value: 10
max_sync_beacons = 10


# Name: beacon_sense_block_size
# Description: Window used by tdma_mobiles nodes when looking for a beacon. This 
#               controls the latency of declaring sync. Too small of a value may
#               cause the mobile to be unable to process samples in real time when \
#               it does not have sync
# Units: Seconds
# Validated Value Set: 0.5
# Possible Value Set: (<frame_len> from frame_file):inf
# Default Value: 1
beacon_sense_block_size = 1


#===========================================================================
#[LINK LAYER: TDMA PROTOCOL] LOW-LEVEL PARAMETERS
#===========================================================================
# Name: max_beacon_error
# Description: Maximum allowed magnitude of beacon timing error. Beacons with
#              timing errors greater than this (other than time cal beacons) 
#              will be rejected.
# Units: seconds
# Validated Value Set: 0.01:0.5
# Possible Value Set: 0.01:infinity
# Default Value: 0.01 
max_beacon_error = 0.01


# Name: slot_pre_guard
# Description: Quiet time at the start of each slot reserved as a work around 
#              for transients or settling times
# Units: seconds
# Validated Value Set: 0:.2
# Possible Value Set: 0:slot length
# Default Value: 0 
slot_pre_guard = 0


# Name: frame_lead_limit
# Description: How far in advance to schedule transmissions. This prevents late
#              packet errors at the transmitter. If seeing a lot of L
#              characters at the console, this may be too low
# Units: seconds
# Validated Value Set: .2:.75
# Possible Value Set: 0:infinity
# Default Value: .2
frame_lead_limit = 0.2


#===========================================================================
#[LINK LAYER: TRAFFIC QUEUES] LOW-LEVEL PARAMETERS
#===========================================================================
# Name: mac_tx_packet_q_depth
# Description: Maximum size of the application layer packet queue. This queue
#              handles packets coming in from the traffic generator over 
#              the tuntap interface
# Units: packets
# Validated Value Set: 50
# Possible Value Set: 1:infinity
# Default Value: 100 
mac_tx_packet_q_depth = 100


# Name: phy_rx_packet_q_depth
# Description: Maximum size of the physical layer packet queue. This queue 
#              handles packets arriving at the node from the over the air 
#              interface
# Units: packets
# Validated Value Set: 50
# Possible Value Set: 1:infinity
# Default Value: 50 
phy_rx_packet_q_depth = 50 


# Name: infinite_backlog_refill_threshold
# Description: Once the number of elements in the mac_tx_packet_q_depth falls below
#              this number of packets, the nodes interna infinite backlog traffic generator
#              will refill it. Suggest using 1/2 of the app in queue size
#              to balance how much the infinite backlog queue filler with
#              thrash vs the probability that the mac will be starved for 
#              packets
# Units: packets
# Validated Value Set: 50:250
# Possible Value Set: 1:infinity
# Default Value: 250 
infinite_backlog_refill_threshold = 250


#===========================================================================
#[LINK LAYER: RADIO FRONTEND FREQUENCY HOPPING] MID-LEVEL PARAMETERS
#===========================================================================
# Name: rf_frequency_list
# Description: The list of available frequency offsets to choose from when retuning the rf 
#              front end. Values are specified relative to tx_freq
# Units: Hz
# Range of Units: [-maxOffset:maxOffset]
#                 (Usable range is limited by tuning range of the Radio Frontend)
# Dependencies: Must match frequency list of intended recipient nodes. 
# Default Value: 0   (no hopping)
#
rf_frequency_list = 0


#===========================================================================
#[LINK LAYER: GENERAL ADAPTATION] MID-LEVEL PARAMETERS
#===========================================================================
# Name: learning_rate
# Description: This is the weight applied to new information. New information is combined
#              with old information according to the following:
#              combined_info = (1-learning_rate)*old_info + learning_rate*new_info
# Units: N/A
# Validated Value Set: 0:1
# Possible Value Set: 0:1
# Default Value: 0.9 
# Dependencies: Higher values will place more emphasis on the most recent measurement
#               at the expense of higher sensitivity to measurement noise
learning_rate = 0.25


# Name: greedy_epsilon
# Description: This the epsilon in a greedy epsilon strategy for exploration.
#              Epsilon is the probability
#              on any iteration to choose to explore the feature space rather than 
#              exploit what is currently known about the feature space to choose an 
#              optimal operating point. 
#              Setting this to 1 will cause the initial slot/channel assignments to
#              persist (i.e. no re-assignments will be made). Useful for setting up a
#              static TDMA frame with RF power control. 
# Units: N/A
# Validated Value Set: 0:1
# Possible Value Set: 0:1
# Default Value: 0.1
# Dependencies: Higher values will result in faster convergence to changes in the 
#               environment, but worse steady state throughput
greedy_epsilon = 0.5


# Name: frame_validaton_history_depth
# Description: Integer number of frames used to compute packet statistics such as 
#              packet error rates. In general, this should be set  
#              somewhere around beacon_sync_timeout*frame_rate
#              Controls the latency of a tdma_base node in re-assigning slots to mobiles
# Units: frames
# Validated Value Set: 1:10
# Possible Value Set: 1:infinity
# Default Value: 10
frame_validaton_history_depth = 10


# Name:slot_assignment_leadtime
# Description: Number of frames in advance to announce changes in the 
#              schedule. This may become a derived parameter in the future,
#              but for now this should be on the order of 
#              beacon_sync_timeout/(<frame_len> from frame_file)
# Units: frames
# Validated Value Set: 1,4
# Possible Value Set: 1:inf
# Default Value: 4
slot_assignment_leadtime = 4


#===========================================================================
#[LINK LAYER: GENERAL ADAPTATION] LOW-LEVEL PARAMETERS
#===========================================================================
# Name: db_file
# Description: Path to the sqlite database file. This file should be
#              located on a ramdisk for best performance
# Units: N/A
# Validated Value Set: /tmp/ram/performance_history.sqlite
# Possible Value Set: valid unix file locations
# Default Value: /tmp/ram/performance_history.sqlite
db_file = /tmp/ram/performance_history.sqlite


# Name: db_frame_memory_depth
# Description: The maximum number of frames to keep in a database.
#              Larger numbers provide more history to work with, but slower database
#              access. This should always be significantly larger than any statistics 
#              or tracking windows
# Units: frames
# Validated Value Set: 100,500
# Possible Value Set: 
# Default Value: 100
db_frame_memory_depth = 100


# Name: db_prune_interval
# Description: Number of frames to wait in between cleaning the database.
#              The time required to clean the database scales linearly
#              with the number of elements being removed, so for the most
#              consistent performance, clean after each frame.
# Units: frames
# Validated Value Set: 1,10
# Possible Value Set: 1:inf
# Default Value: 1
db_prune_interval = 1


# Name: downlink_packet_feedback_timeout
# Description: Number of frames to wait for an ack before marking a
#              downlink packet as failed.
# Units: frames
# Validated Value Set: 4
# Possible Value Set: 3:inf
# Default Value: 4
downlink_packet_feedback_timeout = 4


# Name: uplink_packet_feedback_timeout
# Description: Number of frames to wait for an uplink packet before 
#              marking it as failed.
# Units: frames
# Validated Value Set: 3
# Possible Value Set: 2:inf
# Default Value: 3
uplink_packet_feedback_timeout = 3


#===========================================================================
#[LINK LAYER: TDMA-BERF PROTOCOL] MID-LEVEL PARAMETERS
#===========================================================================

# Name: berf_beacon_channel
# Description: The channel index usef by a tdma_mobile node to rendezvous with the beacon of a tdma_base node 
#              and establish sync with the tdma_base node TDMA frame. 
#              It should correspond to the specified beacon channel in the frame_file XML file.
# Units: Channel number
# Validated Value Set: [0, digital_freq_hop_num_channels-1]
# Possible Value Set:  [0, digital_freq_hop_num_channels-1]
# Default Value: 0
# Dependencies: 
# Other limitations:
berf_beacon_channel = 0

# Name: berf_beacon_hopping_enabled
# Description: Enables the tdma_base node to choose which channel to use for the beacon slot.
#              When enabled, the frame_files channel assignment for the beacon slot is ignored.
# Units: Channel number
# Validated Value Set: [0, digital_freq_hop_num_channels-1]
# Possible Value Set:  [0, digital_freq_hop_num_channels-1]
# Default Value: 0
# Dependencies: 
# Other limitations:
berf_beacon_hopping_enabled = False

# Name: berf_base_rf_hop_rendezvous_frames
# Description: The duration that a tdma_base node will dwell in a band 
#              for a tdma_mobile to signal a successful rendezvous
# Units: mobile dwells
# Validated Value Set: ? 
# Possible Value Set: 1<x<inf
# Default Value: 2
# Dependencies: 
berf_base_rf_hop_rendezvous_frames = 2.0


# Name: RF Hopper Synchronization Timeout
# Description: The duration that a tdma_mobile node will dwell in a band waiting 
#              for a tdma_base beacon before hopping to the next band 
# Units: Seconds
# Validated Value Set: 2.0, 10.0
# Possible Value Set: 0:inf
# Default Value: 2.0
# Dependencies:
berf_mobile_rf_hop_rendezvous_interval = 2.0


# Name: berf_base_beacon_hop_rendezvous_frames
# Description: The duration that a tdma_base node will dwell in a channel 
#              for a tdma_mobile to signal a successful rendezvous
# Units: mobile dwells
# Validated Value Set: ? 
# Possible Value Set: 1<x<inf
# Default Value: 2
# Dependencies: 
berf_base_beacon_hop_rendezvous_frames = 40

# Name: berf_mobile_beacon_hop_rendezvous_interval
# Description: The duration that a tdma_mobile node will dwell in a channel waiting 
#              for a tdma_base beacon before hopping to the next channel 
# Units: Seconds
# Validated Value Set: 2.0, 10.0
# Possible Value Set: 0:inf
# Default Value: 2.0
# Dependencies:
berf_mobile_beacon_hop_rendezvous_interval = 1.760


# Name: berf_exploration_protocol
# Description: This determines how slots and channels are selected for exploration
# Units: N/A
# Validated Value Set: random, increment
# Possible Value Set: random, increment
# Default Value: increment 
# Dependencies:
berf_exploration_protocol = increment


# Name: berf_stats_sense_window
# Description: Number of frames used to compute statistics to be used for the next
#              decision
# Units: frames
# Validated Value Set: 5:10
# Possible Value Set: 1:inf
# Default Value: 10 
# Dependencies: This must be larger than the round trip latency for feedback, otherwise
#               statistics will be based on pending packets only, which will not provide
#               anything meaningful. The current worst case round trip latency is four 
#               frames, so a practical minimum on this parameter would be 5 frames. 
berf_stats_sense_window = 10


# Name: Initial Explore Frames
# Description: Number of frames to remain in an initial exploration phase once the  
#              tdma_base node is online. 
# Units: frames
# Validated Value Set: 4:10
# Possible Value Set: 1:inf
# Default Value: 4 
# Dependencies: Must be greater than or equal to slot_assignment_leadtime 
berf_initial_explore_duration = 4


# Name: Learning State Duration
# Description: Number of frames to wait between making new decisions
# Units: frames
# Validated Value Set: 4:10
# Possible Value Set: 1:inf
# Default Value: 4
# Dependencies: Must be greater than or equal to slot_assignment_leadtime 
berf_epoch_duration = 4


#===========================================================================
#[LINK LAYER: BERF RADIO FRONTEND POWER CONTROL] MID-LEVEL PARAMETERS
#===========================================================================
# Name: Enable Power Control for Base Downlink Slots
# Description: When set to 1, this option will enable power control
#              capability for base downlink slots. Other slots including
#              uplink and beacons are not affected and will have gain
#              set by rf_tx_gain
# Units: Boolean
# Validated Value Set: [0, 1]
# Possible Value Set:  [0, 1]
# Default Value: 0
# Dependencies: When 1, other parameters relating to power control can be changed
#               A slot selection strategy that supports databases must be used. The only
#               strategy that currently supports this is ber_feedback
rf_power_control_enabled = 0


# Name: Power control maximum gain
# Description: Maximum transmit gain, when power control is enabled
# Units: dB
# Validated Value Set: 0 up to 31.5 at 0.5 increment
# Possible Value Set:  0 up to 31.5 at 0.5 increment
# Default Value: 31.5
# Dependencies: applicable only when rf_power_control_enabled=1
rf_power_control_max_tx_gain = 31.5


# Name: Power control minimum gain
# Description: Minimum transmit gain, when power control is enabled
# Units: dB
# Validated Value Set: 0 up to 31.5 at 0.5 increment
# Possible Value Set:  0 up to 31.5 at 0.5 increment
# Default Value: 0.0
# Dependencies: applicable only when rf_power_control_enabled=1
rf_power_control_min_tx_gain = 0.0


# Name: Power control threshold and step size
# Description: Power control BER threshold and gain change step size
#              applicable when power control is enabled
# Units: ratio for BER, dB for power step size
# Validated Value Set: 
# Possible Value Set:  0 to 1 for BER, step size should be about few dB
#                      BER list must start from 0.  Last value must be less than 1
#                      Both lists must have exactly 4 values
# Default Value: 
# Dependencies: threshold and step size go together
rf_power_control_thresholds =  0, 0.03, 0.08, 0.50
rf_power_control_stepsizes  = -2,    0,    3,    9     


# Name: Power control query frames
# Description: Number of frames used in computing link quality when making
#              decisions about changing gain
# Units: N/A
# Validated Value Set: 
# Possible Value Set:  integer value around 10
# Default Value: 5
# Dependencies: integer, pick something reasonable around 10
rf_power_control_sense_window = 5


#===========================================================================
#[LINK LAYER: TDMA-AGENT PROTOCOL] MID-LEVEL PARAMETERS
#===========================================================================
# Name: agent_type
# Description: Reinforcement Learning algorithm used by the agent
# Units: N/A
# Validated Value Set: q_learner, sarsa
# Possible Value Set: q_learner, sarsa
# Default Value:  q_learner
agent_type = q_learner


# Name: agent_pattern_file
# Description: The name of the .py file that defines all the agents action patterns for a TDMA frame
# Units: N/A
# Validated Value Set: *.py
# Possible Value Set: *.py
# Default Value: pattern.py
agent_pattern_file = pattern.py


# Name: agent_mac_address_mapping
# Description: The ordered list of node mac addresses used to lookup the node mac address
#              of the owner field in the agent_pattern_file
# Units: N/A
# Validated Value Set: the set of all source_mac_address and sink_mac_addresses
# Possible Value Set: the set of all source_mac_address and sink_mac_addresses
# Default Value: 1,2,3
agent_mac_address_mapping = 1,2,3


# Name: agent_pattern_set
# Description: The specific set of patterns to use in the agent_pattern_file 
# Units: N/A
# Validated Value Set:
# Possible Value Set: user defined
# Default Value: SET_01
agent_pattern_set = SET_01


# Name: agent_epoch_duration
# Description: The number of TDMA frames that define the duration of an agents epoch
# Units: N/A
# Validated Value Set: [4:Inf]
# Possible Value Set: [4:20]
# Default Value: 
agent_epoch_duration = 10

# Name: discount_factor
# Description: The weight applied to the expected reward of the next state transition. 
# Units: N/A
# Validated Value Set: 0:1
# Possible Value Set: 0:1
# Default Value: 0.9 
# Dependencies: Higher values will place more emphasis on the expected reward 
#               from a given transition
discount_factor = 0.9


# Name: agent_use_adaptive_alpha
# Description: Enables an agent to adjust the learning rate over time
# Units: N/A
# Validated Value Set: True,False
# Possible Value Set: True,False
# Default Value: False
agent_use_adaptive_alpha = False


# Name: agent_use_adaptive_greedy_epsilon
# Description: Enables an agent to adjust the exploration rate over time
# Units: N/A
# Validated Value Set: True,False
# Possible Value Set: True,False
# Default Value: False
agent_use_adaptive_greedy_epsilon = True


# Name: agent_epsilon_adaptation_threshold
# Description: The number of visits to a state before the agent begins adapting 
#              its exploration rate
# Units: visits per state
# Validated Value Set:
# Possible Value Set:
# Default Value:
agent_epsilon_adaptation_threshold = 2


# Name: agent_reward_states
# Description: The list defining the network communication states 
# Units: N/A
# Validated Value Set: 0,1,2
# Possible Value Set: user defined
# Default Value: 0,1,2
agent_reward_states = 0,1,2


# Name: agent_reward_vals
# Description: The list defining the reward corresponding to agent_reward_states
# Units: N/A
# Validated Value Set: -100,-10,10
# Possible Value Set: user defined
# Default Value: -100,-10,10
agent_reward_vals = -100,-10,10


# Name: agent_use_reward_change_detection
# Description: Enables the agent to detect and react to a changed environment.
# Units: N/A
# Validated Value Set: True,False
# Possible Value Set: True,False
# Default Value: False
agent_use_reward_change_detection = False


# Name: agent_reward_oldbuffer_size
# Description: The depth of the buffer of old rewards received.
# Units: N/A
# Validated Value Set: integers > 0
# Possible Value Set: integers > 0
# Default Value:
agent_reward_oldbuffer_size = 5


# Name: agent_reward_guardbuffer_size
# Description: The depth of the buffer of intermediate rewards received.
# Units: N/A
# Validated Value Set: integers >= 0
# Possible Value Set: integers >= 0
# Default Value: 0
agent_reward_guardbuffer_size = 0


# Name: agent_reward_newbuffer_size
# Description: The depth of the buffer of new rewards received.
# Units: N/A
# Validated Value Set: integers > 0
# Possible Value Set: integers > 0
# Default Value: 5
agent_reward_newbuffer_size = 5


# Name: agent_rendezvous_interval
# Description: The duration that a tdma_mobile node will dwell in a band waiting 
#              for a tdma_base beacon before hopping to the next band 
# Units: seconds
# Validated Value Set: 
# Possible Value Set: (<frame_len> from frame_file):inf
# Default Value: 1
agent_rendezvous_interval = 1


# Name: agent_rendezvous_rf_band_list
# Description: List of the bands in rf_frequency_list.
#              Used to define the possible location of beacon channels for rendezvous
#              One entry for each possible beacon channel in each band
#              Each entry has a corresponding entry in agent_rendezvous_dig_chan_list
# Units: N/A
# Validated Value Set: list of elements taken from rf_frequency_list
# Possible Value Set:list of elements taken from rf_frequency_list
# Default Value: 0,0,0
agent_rendezvous_rf_band_list = 0,0,0


# Name: agent_rendezvous_dig_chan_list
# Description: List of the channels that beacons occupy in the agent_pattern_set.
#              Used to define the possible location of beacon channels for rendezvous
#              One entry for each possible beacon channel in each band
#              Each entry has a corresponding entry in agent_rendezvous_rf_band_list
# Units: N/A
# Validated Value Set: list of elements taken from rf_frequency_list
# Possible Value Set: list of elements taken from rf_frequency_list
# Default Value: 0,1,2
agent_rendezvous_dig_chan_list = 0,1,2

# Name: agent_lock_policy
# Description: Allows the agent to lock its policy after receiving the maximum reward
               agent_lock_buffer_len times successively
# Units: N/A
# Validated Value Set: list of elements taken from rf_frequency_list
# Possible Value Set: list of elements taken from rf_frequency_list
# Default Value: 0,1,2
agent_lock_policy = 0

# Name: agent_lock_buffer_len
# Description: The number of successive times that an agent must receiver maximum reward
               to lock the policy
# Units: epochs
# Validated Value Set: list of elements taken from rf_frequency_list
# Possible Value Set: list of elements taken from rf_frequency_list
# Default Value: 0,1,2
agent_lock_buffer_len = 20

#===========================================================================
#[LINK LAYER: TDMA-SEQUENTIAL-AGENT PROTOCOL] MID-LEVEL PARAMETERS
#===========================================================================
# Name: Sequential agent pattern cycling order
# Description: This is a list of indices, starting at 0, that specifies the pattern order
#              that the agent cycles through#              
# Units: N/A
# Validated Value Set:
# Possible Value Set:
# Default Value: 0,1,2
# Dependencies: index starting at 0 can only be up to number of patterns-1
sequential_pattern_order = 0,1,2


#===========================================================================
#[LINK LAYER: ADDRESSING] MID-LEVEL PARAMETERS
#===========================================================================
# Name: source_mac_address
# Description: Source MAC address of this node
# Units: N/A
# Validated Value Set: 1:100
# Possible Value Set: 1:65535
# Default Value: 1
source_mac_address = 1


# Name: sink_mac_addresses
# Description:  Comma separated list of node MAC addresses in the network. 
#               This controls which nodes are considered valid endpoints for 
#               traffic, and which nodes will be included in slot allocation. 
#               The tdma_base node for a network can always send and receive 
#               traffic, but will only have traffic addressed to it directly  
#               (as opposed to routing) if it appears in a tdma_mobele node sink 
#               address list
# Units: N/A
# Validated Value Set: any list of unique, valid mac addresses
# Possible Value Set: any list of unique, valid mac addresses
# Default Value: 2,3
sink_mac_addresses = 2,3


# Name: base_station_mac_address
# Description: MAC address of the networks tdma_base node. No mobile node should
#              have a MAC address lower than the highest tdma_base node MAC 
#              address in the network
# Units: N/A
# Validated Value Set: 1
# Possible Value Set: 1:65535
# Default Value: 1
base_station_mac_address = 1


# Name: tx_access_code
# Description: The access code used by this node for packets headers it transmits
# Units: N/A
# Validated Value Set: gold codes
# Possible Value Set: any binary codeword with appropriate auto/cross correlation properties
# Default Value:
tx_access_code = 0000010000110001010011110100011100100101101110110011010101111110


# Name: rx_access_code
# Description: The access code used by this nodes receiver for packet processing
# Units: N/A
# Validated Value Set: gold codes
# Possible Value Set: any binary codeword with appropriate auto/cross correlation properties
# Default Value:
rx_access_code = 0000010000110001010011110100011100100101101110110011010101111110

# Threshold
# Description: Number of incorrect bits allowed in access code to detect
#              VCS channel access.
# Development Status Code: IMPLEMENTED
# Units: bits
# Range of Units: [0 - Access Code Length]
# Dependencies: Must be less than access code length
# Other limitations: The more bits allowed the higher the probability of
#                    false alarm but the lower the probability of missed
#                    detection
# Default: -1
access_code_threshold = -1

#===========================================================================
#[TUNTAP INTERFACE] MID-LEVEL PARAMETERS
#===========================================================================
# Name: tuntap_source_ip_address
# Description: IP address of this node
# Units: N/A
# Validated Value Set: 192.168.200.x
# Possible Value Set: 192.168.200.x
# Default Value: 192.168.200.1
tuntap_source_ip_address = 192.168.200.1


# Name: tuntap_sink_ip_addresse
# Description: List of IP addresses for the nodes in the network, in the
#              same order as sink_mac_addresses. This is only used by the 
#              tun/tap device when automatically adding arp entries
# Units: N/A
# Validated Value Set: 192.168.200.x
# Possible Value Set: 192.168.200.x
# Default Value: 192.168.200.1, 192.168.200.2
tuntap_sink_ip_addresses = 192.168.200.1, 192.168.200.2


# Name: tuntap_mtu 
# Description: Maximum Transmission Unit (MTU) of the tuntap interface
#              This is the maximum IP packet size that the tunnel device will
#              process without fragmentation. When IP packets exceed this size,
#              the packets passed from the network layer to the tunnel device 
#              will be fragmented into packets at most tuntap_mtu + 14 bytes long. 
#              The 14 bytes is the length of the ethernet header. Note that 
#              packets will be fragmented with a block size of 8 bytes, so all
#              fragments will be some integer multiple of 8 bytes long, with 
#              the possible exception of the final fragment. The tuntap_mtu must be 
#              larger than the ip header length of 21 bytes to allow for 
#              nonzero throughput. The limit on packet size for the 
#              is 4096 total bytes 
# Units: bytes
# Validated Value Set: 21:1500
# Possible Value Set: 21:4000
# Default Value: 1500
tuntap_mtu = 1500


#===========================================================================
#[TUNTAP INTERFACE] LOW-LEVEL PARAMETERS
#===========================================================================
# Name: tuntap_device_filename
# Description: The name of the device to clone all tun/tap interfaces from
# Units: N/A
# Validated Value Set: /dev/net/tun
# Possible Value Set: /dev/net/tun
# Default Value: /dev/net/tun 
tuntap_device_filename = /dev/net/tun


# Name: tuntap_device_name
# Description: The name of virtual network interface
# Units: N/A
# Validated Value Set: gr0
# Possible Value Set: valid unix filenames
# Default Value: gr0
tuntap_device_name = gr0


# Name: tuntap_use_persistent_device
# Description: Set this to true if you want to manually manage the tun/tap
#              device. Note that you should only use the device in tap mode
# Units: N/A
# Validated Value Set: True,False
# Possible Value Set: True,False
# Default Value: False
tuntap_use_persistent_device = False


#===========================================================================
#[NETWORK LAYER: TRAFFIC MODEL] MID-LEVEL PARAMETERS
#===========================================================================
# Name: traffic_generation
# Description: Selects wheter traffic to provided via the tuntap interface or 
#              if the internal infinite backlog traffic generator is used
#              If none then this node will not source and traffic
# Units: 
# Validated Value Set: infinite, none
# Possible Value Set: infinite, tunnel, none
# Default Value: infinite
traffic_generation = infinite


# Name: Payload Size
# Description: Number of bytes in a data packet payload generated by the 
#              internal infinite traffic generator when 
#              traffic_generation = infinite
# Units: bytes
# Validated Value Set: 140:1400
# Possible Value Set: 0:???
# Default Value: 140    
infinite_backlog_payload_size = 140


#===========================================================================
#[LOGGING] MID-LEVEL PARAMETERS
#===========================================================================
# Name: pcktlog
# Description: The path and filename to log all LINK Layer packet metadata
# Units: N/A
# Validated Value Set:
# Possible Value Set:
# Default Value: ${logsdir}/packet_log_nodeN.xml
pcktlog = ${logsdir}/packet_log_nodeN.xml


# Name: statelog
# Description: The path and filename to log all LINK Layer state machine metadata
# Units: N/A
# Validated Value Set:
# Possible Value Set:
# Default Value: ${logsdir}/state_log_nodeN.xml
statelog = ${logsdir}/state_log_nodeN.xml


# Name: agentlog
# Description: The path and filename to log all agent metadata (for tdma_base nodes)
# Units: N/A
# Validated Value Set:
# Possible Value Set:
# Default Value: ${logsdir}/packet_log_nodeN.xml  (for tdma_base nodes)
#                or /dev/null  (for tdma_mobile nodes)
agentlog = /dev/null


# Name: dblog
# Description: The path and filename to log all LINK Layer database metadata
# Units: N/A
# Validated Value Set:
# Possible Value Set:
# Default Value: ${logsdir}/packet_log_nodeN.xml  (for tdma_base nodes)
#                or /dev/null  (for tdma_mobile nodes)
dblog = /dev/null


# Name: log_level
# Description: This option isnt actually controllable from the ini file. Its 
#              command line only and controls the verbosity of the console 
#              output
# Units: N/A
# Validated Value Set: WARN, ERROR, DEBUG, INFO, WARNING,CRITICAL
# Possible Value Set: WARN, ERROR, DEBUG, INFO, WARNING,CRITICAL
# Default Value: INFO
log_level = INFO


# Name: log
# Description: Enable logging in C++ subroutines
#              Generates .dat meta data files for debugging
# Development Status Code: (ofdm) VALIDATED, (narrowband) VALIDATED
# Units: N/A
# Range of Units: {False, True}
# Dependencies: None
# Other limitations: WARNING. Massive .dat files recorded when this option set True.
# Default: False
log = False


# Name: verbose
# Description: GNU Radio provided switch for outputting meta-data (not really ever used)
# Development Status Code: NOT USED
# Units: N/A
# Range of Units {True, False}
# Dependencies: None
# Other limitations: None
# Default: False
verbose = False
